// Copyright (c) 2024 The horm-database Authors (such as CaoHao <18500482693@163.com>). All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by server/server-cmdline v2.0.6. DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	"github.com/horm-database/common/errs"
	"github.com/horm-database/common/json"
	"github.com/horm-database/common/types"
	"github.com/horm-database/manage/auth"
	"github.com/horm-database/manage/model/table"
	"github.com/horm-database/manage/srv"
	"github.com/horm-database/manage/srv/transport/web/head"
)

/* *************** Api Definition *************** */

var (
	ServerDesc = &srv.Description{
		Name: "server.access.webapi",
		Funcs: []srv.Func{
			// user
			{"SendEmailCode", SendEmailCode},
			{"Register", Register},
			{"Login", Login},
			{"ResetPassword", ResetPassword},
			{"FindUser", FindUser},
			{"FindUserByID", FindUserByID},

			// workspace
			{"WorkspaceBaseInfo", WorkspaceBaseInfo},
			{"WorkspaceJoinApply", WorkspaceJoinApply},
			{"WorkspaceApproval", WorkspaceApproval},
			{"WorkspaceMemberInvite", WorkspaceMemberInvite},
			{"WorkspaceMemberRemove", WorkspaceMemberRemove},
			{"WorkspaceMemberList", WorkspaceMemberList},
			{"MaintainWorkspaceManager", MaintainWorkspaceManager},

			// index
			{"IndexTableList", IndexTableList},
			{"CollectTableList", CollectTableList},
			{"CollectTable", CollectTable},

			// product
			{"AddProduct", AddProduct},
			{"UpdateProduct", UpdateProduct},
			{"UpdateProductStatus", UpdateProductStatus},
			{"MaintainProductManager", MaintainProductManager},
			{"ProductList", ProductList},
			{"ProductDetail", ProductDetail},
			{"ProductMemberList", ProductMemberList},
			{"ProductJoinApply", ProductJoinApply},
			{"ProductApproval", ProductApproval},
			{"ProductChangeRoleApply", ProductChangeRoleApply},
			{"ProductChangeRoleApproval", ProductChangeRoleApproval},
			{"ProductMemberRemove", ProductMemberRemove},

			// db
			{"AddDB", AddDB},
			{"UpdateDBBase", UpdateDBBase},
			{"MaintainDBManager", MaintainDBManager},
			{"UpdateDBStatus", UpdateDBStatus},
			{"UpdateDBNetwork", UpdateDBNetwork},
			{"DBBase", DBBase},
			{"DBNetworkDetail", DBNetworkDetail},

			// table
			{"AddTable", AddTable},
			{"UpdateTableBase", UpdateTableBase},
			{"UpdateTableStatus", UpdateTableStatus},
			{"UpdateTableAdvance", UpdateTableAdvance},
			{"TableDetail", TableDetail},
			{"TableAdvanceConfig", TableAdvanceConfig},

			// table plugin
			{"AddTablePlugin", AddTablePlugin},
			{"UpdateTablePlugin", UpdateTablePlugin},
			{"DelTablePlugin", DelTablePlugin},
			{"TablePlugins", TablePlugins},

			// plugin
			{"AddPlugin", AddPlugin},
			{"UpdatePlugin", UpdatePlugin},
			{"ReplacePluginConfig", ReplacePluginConfig},
			{"DelPluginConfig", DelPluginConfig},
			{"PluginList", PluginList},
			{"PluginConfigs", PluginConfigs},

			// app
			{"AddApp", AddApp},
			{"UpdateApp", UpdateApp},
			{"ResetAppSecret", ResetAppSecret},
			{"UpdateAppStatus", UpdateAppStatus},
			{"MaintainAppManager", MaintainAppManager},
			{"AppList", AppList},
			{"AppDetail", AppDetail},

			// app access db data
			{"DBSupportOps", DBSupportOps},
			{"AppCanAccessDB", AppCanAccessDB},
			{"AppApplyAccessDB", AppApplyAccessDB},
			{"AppAccessDBApproval", AppAccessDBApproval},
			{"AppAccessDBWithdraw", AppAccessDBWithdraw},
			{"AppAccessDBUpdate", AppAccessDBUpdate},
			{"AppAccessDBOnOff", AppAccessDBOnOff},
			{"DBsAllAppAccessList", DBsAllAppAccessList},
			{"AppsAllDBAccessList", AppsAllDBAccessList},

			// app access table data
			{"TableSupportOps", TableSupportOps},
			{"AppCanAccessTable", AppCanAccessTable},
			{"AppApplyAccessTable", AppApplyAccessTable},
			{"AppAccessTableApproval", AppAccessTableApproval},
			{"AppAccessTableWithdraw", AppAccessTableWithdraw},
			{"AppAccessTableUpdate", AppAccessTableUpdate},
			{"AppAccessTableOnOff", AppAccessTableOnOff},
			{"TablesAllAppAccessList", TablesAllAppAccessList},
			{"AppsAllTableAccessList", AppsAllTableAccessList},
		},
	}
)

func DecodeAndAuth(ctx context.Context, header *head.WebReqHeader, reqBuf []byte, req interface{}) (err error) {
	if req != nil {
		err = json.Api.Unmarshal(reqBuf, req)
		if err != nil {
			return errs.Newf(errs.ErrServerDecode,
				"decode request error: %v, request:[%s]", err, types.QuickReplaceLFCR2Space(reqBuf))
		}
	}

	if header.Userid == 0 {
		return errs.New(errs.RetWebNotLogin, "please login first")
	}

	notFind, user, err := table.GetUserByID(ctx, header.Userid)
	if err != nil {
		return err
	}

	if notFind {
		return errs.New(errs.RetWebNotFindUser, "not find user")

	}

	if !auth.SignSuccess(header, user.Token) {
		//return errs.Newf(errs.ErrAuthFail, "signature failed")
	}

	if header.WorkspaceId == 0 {
		return errs.Newf(errs.RetWebParamEmpty, "workspace_id can`t be empty")
	}

	err = auth.IsWorkspaceMember(ctx, header.Userid, int(header.WorkspaceId))
	if err != nil {
		return err
	}

	return nil
}
